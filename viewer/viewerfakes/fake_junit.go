// Code generated by counterfeiter. DO NOT EDIT.
package viewerfakes

import (
	"sync"

	"github.com/ljfranklin/test-runner-resource/models"
	"github.com/ljfranklin/test-runner-resource/viewer"
)

type FakeJunit struct {
	PrintSummaryStub        func(models.Summary) error
	printSummaryMutex       sync.RWMutex
	printSummaryArgsForCall []struct {
		arg1 models.Summary
	}
	printSummaryReturns struct {
		result1 error
	}
	printSummaryReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJunit) PrintSummary(arg1 models.Summary) error {
	fake.printSummaryMutex.Lock()
	ret, specificReturn := fake.printSummaryReturnsOnCall[len(fake.printSummaryArgsForCall)]
	fake.printSummaryArgsForCall = append(fake.printSummaryArgsForCall, struct {
		arg1 models.Summary
	}{arg1})
	fake.recordInvocation("PrintSummary", []interface{}{arg1})
	fake.printSummaryMutex.Unlock()
	if fake.PrintSummaryStub != nil {
		return fake.PrintSummaryStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.printSummaryReturns.result1
}

func (fake *FakeJunit) PrintSummaryCallCount() int {
	fake.printSummaryMutex.RLock()
	defer fake.printSummaryMutex.RUnlock()
	return len(fake.printSummaryArgsForCall)
}

func (fake *FakeJunit) PrintSummaryArgsForCall(i int) models.Summary {
	fake.printSummaryMutex.RLock()
	defer fake.printSummaryMutex.RUnlock()
	return fake.printSummaryArgsForCall[i].arg1
}

func (fake *FakeJunit) PrintSummaryReturns(result1 error) {
	fake.PrintSummaryStub = nil
	fake.printSummaryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeJunit) PrintSummaryReturnsOnCall(i int, result1 error) {
	fake.PrintSummaryStub = nil
	if fake.printSummaryReturnsOnCall == nil {
		fake.printSummaryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.printSummaryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeJunit) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.printSummaryMutex.RLock()
	defer fake.printSummaryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJunit) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ viewer.Junit = new(FakeJunit)
