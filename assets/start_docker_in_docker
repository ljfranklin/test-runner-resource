#!/bin/bash

# Adapted from https://github.com/concourse/docker-image-resource/blob/274ca12649776c2515b015ea04871b5bef3241b5/assets/common.sh

set -eu

: "${LOG_FILE:=/tmp/docker.log}"
: "${PIDFILE:=/tmp/docker.pid}"

sanitize_cgroups() {
  mkdir -p /sys/fs/cgroup
  mountpoint -q /sys/fs/cgroup || \
    mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup

  # check for /proc/sys/cgroup being mounted readonly, as systemd does
  if grep '/proc/sys/cgroup\s\+\w\+\s\+ro,' /proc/mounts >/dev/null; then
    mount -o remount,rw /sys/fs/cgroup
  fi

  sed -e 1d /proc/cgroups | while read sys hierarchy num enabled; do
    if [ "$enabled" != "1" ]; then
      # subsystem disabled; skip
      continue
    fi

    grouping="$(cat /proc/self/cgroup | cut -d: -f2 | grep "\\<$sys\\>")"
    if [ -z "$grouping" ]; then
      # subsystem not mounted anywhere; mount it on its own
      grouping="$sys"
    fi

    mountpoint="/sys/fs/cgroup/$grouping"

    mkdir -p "$mountpoint"

    # clear out existing mount to make sure new one is read-write
    if mountpoint -q "$mountpoint"; then
      umount "$mountpoint"
    fi

    mount -n -t cgroup -o "$grouping" cgroup "$mountpoint"

    if [ "$grouping" != "$sys" ]; then
      if [ -L "/sys/fs/cgroup/$sys" ]; then
        rm "/sys/fs/cgroup/$sys"
      fi

      ln -s "$mountpoint" "/sys/fs/cgroup/$sys"
    fi
  done
}

mkdir -p /var/log
mkdir -p /var/run

sanitize_cgroups

# check for /proc/sys being mounted readonly, as systemd does
if grep '/proc/sys\s\+\w\+\s\+ro,' /proc/mounts >/dev/null; then
  mount -o remount,rw /proc/sys
fi

local mtu=$(cat /sys/class/net/$(ip route get 8.8.8.8|awk '{ print $5 }')/mtu)
local server_args="--mtu ${mtu}"
dockerd --data-root /scratch/docker ${server_args} >$LOG_FILE 2>&1 &
echo $! > "${PIDFILE}"

sleep 1

until docker info >/dev/null 2>&1; do
  echo waiting for docker to come up...
  sleep 1
done
